// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	models "petstore/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ServiceGetByID mocks base method.
func (m *MockService) ServiceGetByID(ctx context.Context, id uuid.UUID) (models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceGetByID", ctx, id)
	ret0, _ := ret[0].(models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceGetByID indicates an expected call of ServiceGetByID.
func (mr *MockServiceMockRecorder) ServiceGetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceGetByID", reflect.TypeOf((*MockService)(nil).ServiceGetByID), ctx, id)
}

// ServicePost mocks base method.
func (m *MockService) ServicePost(ctx context.Context, pet models.Pet) (models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePost", ctx, pet)
	ret0, _ := ret[0].(models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePost indicates an expected call of ServicePost.
func (mr *MockServiceMockRecorder) ServicePost(ctx, pet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePost", reflect.TypeOf((*MockService)(nil).ServicePost), ctx, pet)
}
